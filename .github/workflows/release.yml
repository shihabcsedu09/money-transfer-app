name: Auto Release

on:
  push:
    branches:
      - main

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: ./mvnw clean package -DskipTests
      
    - name: Get current version
      id: get_version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version numbers
        VERSION=$(echo $LATEST_TAG | sed 's/v//')
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="${MAJOR}.${MINOR}.${NEW_PATCH}"
        
        # If no previous tag exists, start with 1.0.0
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          NEW_VERSION="1.0.0"
        fi
        
        echo "New version: $NEW_VERSION"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        
    - name: Create Git tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag v${{ steps.get_version.outputs.new_version }}
        git push origin v${{ steps.get_version.outputs.new_version }}
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.new_version }}
        release_name: Release v${{ steps.get_version.outputs.new_version }}
        body: |
          ## Money Transfer Application Release v${{ steps.get_version.outputs.new_version }}
          
          ### ðŸš€ What's New
          - Spring Boot application with concurrency handling
          - Distributed locking and deadlock prevention
          - Atomic transactions and optimistic locking
          - Comprehensive API for money transfers
          
          ### ðŸ“¦ Artifacts
          - JAR file ready for deployment
          - Docker image available
          
          ### ðŸ”§ Features
          - âœ… Distributed Locking
          - âœ… Deadlock Prevention  
          - âœ… Atomic Transactions
          - âœ… Optimistic Locking
          - âœ… Comprehensive Testing
          - âœ… Railway Deployment
          - âœ… Auto Versioning
          
          ### ðŸš€ Live Demo
          **Live API**: https://money-transfer-app-production-9d8e.up.railway.app
          
          ### ðŸ“‹ API Endpoints
          - `POST /api/v1/transfers` - Create transfer
          - `GET /api/v1/transfers/{id}` - Get transfer details
          - `GET /ping` - Health check
          - `GET /actuator/health` - Detailed health check
          
          ### ðŸ§ª Test the API
          ```bash
          # Health check
          curl https://money-transfer-app-production-9d8e.up.railway.app/ping
          
          # Create transfer (requires auth)
          curl -X POST https://money-transfer-app-production-9d8e.up.railway.app/api/v1/transfers \
            -H "Content-Type: application/json" \
            -H "Authorization: Basic YWRtaW46YWRtaW4xMjM=" \
            -d '{
              "fromAccountNumber": "ACC001234567890",
              "toAccountNumber": "ACC002345678901", 
              "amount": 100.00,
              "currency": "USD",
              "description": "Test transfer"
            }'
          ```
          
          ### ðŸ“Š Build Info
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref }}
          - **Triggered by**: ${{ github.actor }}
          - **Build Time**: ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false
        
    - name: Upload JAR Artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./target/money-transfer-app-1.0.0.jar
        asset_name: money-transfer-app-v${{ steps.get_version.outputs.new_version }}.jar
        asset_content_type: application/java-archive
        
    - name: Build Docker image
      run: docker build -t money-transfer-app:v${{ steps.get_version.outputs.new_version }} .
      
    - name: Save Docker image
      run: docker save money-transfer-app:v${{ steps.get_version.outputs.new_version }} | gzip > money-transfer-app-v${{ steps.get_version.outputs.new_version }}.tar.gz
      
    - name: Upload Docker Image
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./money-transfer-app-v${{ steps.get_version.outputs.new_version }}.tar.gz
        asset_name: money-transfer-app-v${{ steps.get_version.outputs.new_version }}.tar.gz
        asset_content_type: application/gzip 